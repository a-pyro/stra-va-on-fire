// Generated by ts-to-zod
import { z } from "zod"
import { Json } from "./generated-types"

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
)

export const tokenInfoSchema = z.object({
  expires_at: z.number().nullable(),
  expires_in: z.number().nullable(),
  refresh_token: z.string().nullable(),
  access_token: z.string().nullable(),
})

export const profilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  display_name: z.string().optional().nullable(),
  id: z.string(),
  strava_token: tokenInfoSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
})

export const profilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  display_name: z.string().optional().nullable(),
  id: z.string().optional(),
  strava_token: tokenInfoSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
})

export const profilesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("profiles_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
])

export const profilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  created_at: z.string().nullable(),
  display_name: z.string().nullable(),
  id: z.string(),
  strava_token: tokenInfoSchema.nullable(),
  updated_at: z.string().nullable(),
})
